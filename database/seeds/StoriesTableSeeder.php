<?php

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class StoriesTableSeeder extends Seeder
{
  /**
   * Run the database seeds.
   *
   * @return void
   */
  public function run()
  {
    DB::table('stories')->insert([
      'id' => 1,
      'title' => 'Developer Study Jæm',
      'slug' => 'developer-study-jaem',
      'excerpt' => 'So, ækiti is organizing a Developer Study Jæm for Ekiti State and Ondo State in Nigeria. This is coming real soon',
      'article' => "<h2>What is æternity?</h2><p>According to Bitcoinwiki, æternity is аn open-source decentralized apps platform utilizing next-generation, highly scalable, public blockchain technology. Its off-chain smart contracts use real-world and real-time data by interacting with built-in oracles. According to us, we know æternity is still in the business of stability, usability, governance, and much more problem-solving techniques.</p><p style='text-align: center; '><img src='https://miro.medium.com/max/600/0*n7hFuqtgvRaHDYm7' style='width: 300px;'></p><p>We can’t have Developer Study Jæm without ækiti and it’s team members.</p><p>ækiti is a community of designers, writers, entrepreneurs, and techies coming together under the umbrella of developing and providing awesome solutions using æternity technologies.</p><p>And the ækiti team is made up of smart members, with the heart to learn and the vision of a smarter aeternity community.</p><p style='text-align: center; '><img src='https://miro.medium.com/max/1120/1*6bauj_u0M7TXM8BFVtSMfw.png' style='width: 536px;'></p><h2>So what is Developer Study Jæm?</h2><p>Developer Study Jæm is aimed at gathering developers from the various tech community (Like Developer Student Club, Google Developer Group, Women In Tech, Facebook Developer Circle, and many more) in Ekiti State and Ondo State in Nigeria.</p><p>This is unlike any regular workshops, ækiti team would help in tutoring these developers æternity technologies, encouraging them to collaborate and compete amidst themselves to develop remarkable solutions using æternity technologies.</p><p style='text-align: center; '><img src='https://miro.medium.com/max/1400/0*KZe0s3px_SaQy6-n' style='width: 536px;'></p><p>After the workshop, be sure you would be transformed into an æternity developer and that possibility is limitless. You would be able to participate in æternity hæckathons(plus ækiti hæckathons) and win prizes. You can probably launch your own token sale on æternity or join æternity’s Starfleet incubator program.</p><p>Join phase one Study Jæm in Ekiti State every Monday and Wednesday for 10weeks of intensive training on æternity technologies at TechHub EKSU, Ekiti State University, Ado-Ekiti, Ekiti State, Nigeria. Starting 03:00 PM — 08:00 PM WAT daily.</p><p>Note, just 30 web developers will be picked for this series. Registration is on our website at <a href='https://aekiti.com/' target='_blank' rel='noopener nofollow'>https://aekiti.com</a> to be eligible for this workshop series.</p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2019-12-12',
      'created_at' => date('2019/12/12 00:00:00'),
      'updated_at' => date('2019/12/12 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 2,
      'title' => 'Week One — Developer Study Jæm(Ekiti State)',
      'slug' => 'weekone-destudyjaem-ekiti',
      'excerpt' => 'The long-awaited Ekiti State Study Jæm started on a good note as the participants showed up with their gadgets, a broad smile, and ardent desire to learn',
      'article' => "<p>æternity is an open source in the blockchain that help solve the problem from such has scalability, governance, usability, efficiency, real-world data, contract security.</p><p>The lead for ækiti community, in the person of Emmanuel Joseph(JET), welcomed the participants by giving them full details concerning the workshops and breaking down the curriculum.</p><p style='text-align:center'><iframe src='//docs.google.com/document/d/e/2PACX-1vQTThBNMsEwDhpgNIu6zUX0153QKEkBvIm4qsVBDF4X-4ZpwENVq_jUzJsmqljIClLRLiN4KoAu-4Qq/pub?embedded=true' frameborder='0' width='760' height='569'></iframe></p><p>Developer Study Jæm’s main goal is bringing together existing web developers from different tech communities to learn æternity technologies, provide necessary support and most importantly to aid their rewardability on the æternity development 101 course on dacade. Besides these, there are also opportunities to win several prizes from the competitions.</p><p>Jesulonimi Akingbesote (The Co-Lead for ækiti) took it up from there by giving detailed explanation about Blockchain and the advantages and disadvantages of Blockchain that exists.</p><p>Some of the advantages being transparency in transactions, it also makes transactions efficient, private and secure; he also explained disadvantages including transactions per seconds and susceptibility to being hacked(51% attacks)</p><p>Although with blockchain encryption, decentralization and tokenization are made even possible. Jesulonimi futher spoke about Nodes, Proof of Work(PoW) and Proof of Stake(PoS), etc.</p><p style='text-align:center'><iframe frameborder='0' width='500' height='1155' src='https://platform.twitter.com/embed/index.html?creatorScreenName=emmanuelJet_&amp;dnt=false&amp;embedId=twitter-widget-1&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=1223591286625722368&amp;lang=en&amp;origin=https%3A%2F%2Faekiti.com%2F&amp;siteScreenName=AeternityEkiti&amp;theme=light&amp;widgetsVersion=c4096c4b%3A1589303485003&amp;width=500px'></iframe></p><p>JET ended the first day by explaining æternity, it’s technologies and some it’s terminologies:</p><ul><li>State channels Via Smart Contracts:State Channels provides a method for users to privately communicate and transact off-chain. Only in the case of a disagreement between the contracting parties does the æternity blockchain enforces the smart contract code.</li><li>Oracles:Oracles are sources of information that can be accessed on the blockchain. Anyone can be an oracle provider, their reputation determines whether or not they are seen as reliable sources.</li></ul><p style='text-align:center'><iframe src='//docs.google.com/presentation/d/e/2PACX-1vQbjscPnL7gzgox9HBMZCEeY7-0xKg4LMejLjxDrK9K1gQ-pIfMlCK0_YmB7vRM3eINOC22_uxo1mNk/embed?start=false&loop=false&delayms=3000' frameborder='0' width='760' height='569'></iframe></p><p>JET then briefly explained dacade and a promise of having an online session with the founder(Moritz Stellmacher) the next day.</p><p>It was an insightful session as <a href='https://medium.com/@moritzfelipe' target='_blank'>moritzfelipe</a> showed the participants how to make reviews and learn effectively on Dacade. He also gave thorough answers to every question asked.</p><p style='text-align:center'><iframe src='//www.youtube.com/embed/Sl3K1_QR1Go' frameborder='0' width='640' height='360' class='note-video-clip'></iframe></p><p>JET further advised the Jæmers to take up the opportunity to learn on Dacade and explained how dacade would be used during the #devstudyjaem. He also reminded them that at the end of Ekiti Study Jæm, they would be building a Chat æpp with æternity blockchain as their project.</p><p>To further prepare the Jæmers for the more practical aspect in week two; where they would be introduced to Sophia(Programming language for æternity), State Channels and æternity JS SDK. Jesulonimi did a review of HTML, CSS, and JavaScript.</p><p>With the sharing of snacks and enthusiasm on the part of the participants, the session for the first week came to an end.</p><p style='text-align:center'><a href='https://github.com/aekiti/devstudyjaem-ekiti/tree/master/week1' target='_blank'>Week One on GitHub</a></p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-03-10',
      'created_at' => date('2020/03/10 00:00:00'),
      'updated_at' => date('2020/03/10 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 3,
      'title' => 'Week Two — Developer Study Jæm(Ekiti State)',
      'slug' => 'weektwo-destudyjaem-ekiti',
      'excerpt' => 'The week was not for the faint-hearted at all, as we dived straight into Sophia(æternity blockChain language) after giving a brief review of HTML, CSS, and Javascript the session before',
      'article' => "<p>The <a href='https://aeternity.com/documentation-hub/protocol/contracts/sophia/' target='_blank'>Sophia Language</a> is derived from OCaml/ReasonML family. It is strongly typed and has a restricted dynamic state.</p><p>Sophia is customized for smart contracts, which can be published to a Blockchain (the æternity blockChain). Thus some features of conventional languages, such as floating-point arithmetic, are not present in Sophia, and some blockchain specific primitives like constructions and types have been added.</p><p>The main unit of code in Sophia is the contract.</p><ul><li>Contract implementation, or simply a contract, is the code for a smart contract and consists of a list of types, entrypoints, and local functions. Only the entrypoints can be called from outside the contract.</li><li>A contract instance is an entity living on the blockchain (or in a state channel). Each instance has an address that can be used to call its entrypoints, either from another contract or in a call transaction.</li><li>A contract may define a type of state encapsulating its local state. When creating a new contract the init entrypoint is executed and the state is initialized to its return value.</li></ul><p style='text-align:center'><iframe src='//www.youtube.com/embed/lrUCTD5qriQ' frameborder='0' width='640' height='360' class='note-video-clip'></iframe></p><p>Data types were discussed as well. Some of these data types include; Int (A 2-complement integer), Bool(boolean), Bit(A bit field String), An array of bytes List(A homogeneous immutable singly linked list), State(A user-defined type holding the contract state), Event(An append-only list of blockchain log entries), Tuple(An ordered heterogeneous array) and much more.</p><p style='text-align:center'><iframe frameborder='0' width='500' height='1170' src='https://platform.twitter.com/embed/index.html?creatorScreenName=emmanuelJet_&amp;dnt=false&amp;embedId=twitter-widget-2&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=1226172410464014336&amp;lang=en&amp;origin=https%3A%2F%2Faekiti.com%2F&amp;siteScreenName=AeternityEkiti&amp;theme=light&amp;widgetsVersion=c4096c4b%3A1589303485003&amp;width=500px'></iframe></p><p>Dacade was reviewed again and we built a similar Memevote smart contract. According to Fabián Hernández, MemeVote is a decentralized application of the aeternity blockchain (daepp) that allows registering, tag, comment and vote user memes referenced by URL. This daepp is the result of the Aeternity Development 101 course from dacade.org platform, which is a great community that obliges people to learn about this exciting technology.</p><p style='text-align:center'><a href='https://github.com/aekiti/devstudyjaem-ekiti/tree/master/week2' target='_blank'>Week Two on GitHub</a></p><p>The second day in week two was opened by Emmanuel Joseph(JET) where he spoke about <a href='https://aeternity.com/documentation-hub/developer-tools/sdks/aepp-sdk-js/#%C3%86ternitys-Javascript-SDK' target='_blank'>æternity Javascript SDK</a>, it’s versioning and how it can be used on the web. He then started a discussion with the jæmers on their aeternity development 101 course submission on dacade.</p><p>Jesulonimi Akingbesote went a little deeper with Sophia and they built an authenticated to-do — list æpp which has started functioning with more features to be added as time goes on.</p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-03-11',
      'created_at' => date('2020/03/11 00:00:00'),
      'updated_at' => date('2020/03/11 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 4,
      'title' => 'Week Three — Developer Study Jæm(Ekiti State)',
      'slug' => 'weekthree-destudyjaem-ekiti',
      'excerpt' => 'As we move deeper into the study jæm, the Jæmers are even more enthusiastic than ever and eager to learn and build amazing solutions as they all got Swags(Shirt, Jotter and Pen) to enhance publicity of the workshop series',
      'article' => "<p>To see if the students were really following, the session of the week started with the facilitators asking questions just to ensure the students have been actively learning. To make learning more efficient and improve teamwork, they were grouped into four. Each group encompassing three people each.</p><p><a href='https://medium.com/@emmanueljet' target='_blank'>Emmanuel Joseph (Jet)</a> started the class by explaining ownership of a function in a Smart Contract. He explained that it means making a function restricted. He further showed them how to integrate a SmartContract using Javascript instead of the time-consuming method well known(writing two different methods known as <em>CallStatic</em> and <em>CallFunction</em>). He then mentioned AEproject(ætermity’s technology) project and showed how to initialize a folder using the <em>aeproject init command </em>after downloading the package.</p><p style='text-align:center'><iframe frameborder='0' width='500' height='1028' src='https://platform.twitter.com/embed/index.html?creatorScreenName=emmanuelJet_&amp;dnt=false&amp;embedId=twitter-widget-3&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=1229481554033987585&amp;lang=en&amp;origin=https%3A%2F%2Faekiti.com%2F&amp;siteScreenName=AeternityEkiti&amp;theme=light&amp;widgetsVersion=c4096c4b%3A1589303485003&amp;width=500px'></iframe></p><p>According to æternity, <a href='https://aeproject.gitbook.io/' target='_blank'>AEproject</a> is an æternity framework that helps with setting up a project. The framework makes the development of smart contracts in the æternity network pretty easy. It provides commands for compilation, deployment of smart contracts, running a local node, local compiler, and unit testing the contracts.</p><p>AEproject has five different packages which are:</p><ul><li>aeproject-cli</li><li>aeproject-lib</li><li>aeproject-logger</li><li>aeproject-config</li><li>aeproject- utils</li></ul><p>The <a href='https://github.com/aekiti/devstudyjaem-ekiti/tree/master/week3' target='_blank'>GitHub repository for Developer Study Jæm(Ekiti State)</a> was updated weekly to help Jæmers study and revise.</p><p>Jesulonimi Akingbesote took the jæmers through the process of installation of AEproject on their various system, Gitbook documentation of AEproject and Firebase, and then explained how other database technology like Google Firebase can be implemented on the Blockchain.</p><p><a href='https://firebase.google.com/' target='_blank'>Firebase</a> can be used to authenticate users in your decentralized web app, store users data(Firestore or Realtime database), and lots more which makes your æpp perform a lot of cool functions</p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-03-12',
      'created_at' => date('2020/03/12 00:00:00'),
      'updated_at' => date('2020/03/12 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 5,
      'title' => 'Week Four — Developer Study Jæm(Ekiti State)',
      'slug' => 'weekfour-destudyjaem-ekiti',
      'excerpt' => 'After rounding up on the installation of the AEproject on the jæmers system, ReactJS was introduced',
      'article' => "<p><a href='https://reactjs.org/' target='_blank'>ReactJS</a> is a JavaScript library used for building user interfaces and makes creating Interactive User Interfaces painless(Single Page Applications). When designing simple views for each state in an application, ReactJs will help in efficiently updating and render just the right components when the data changes.</p><p>Jesulonimi Akingbesote kick-started the study jæm by explaining ReactJS fully using <a href='https://codesandbox.io/' target='_blank'>CodeSandbox(online text editor)</a> to illustrate. He spoke about functions, sectioning applications, properties, files, using the state to change a variable, multiple methods to change passing properties from a function to the other, readable for other users, and lots more by building a simple To-do list on the editor.</p><p style='text-align:center'><iframe src='https://codesandbox.io/embed/y2lrywpk21' frameborder='0' width='640' height='569'></iframe></p><p>The jæmers then installed ReactJS using '<em>npm i -g create-react-app</em>' command after getting a detailed explanation of the process. Note that you can also add ReactJS to your existing site using the <a href='https://reactjs.org/docs/add-react-to-a-website.html' target='_blank'>CDN links</a>.</p><p>Emmanuel Joseph(JET) then explained how ReactJS can be used to build a decentralized website using AEproject. He spoke about how to use AEproject shape technology to get a boilerplate of a To-Do list æpp built on æternity blockchain using aeproject shape react command.</p><p style='text-align:center'><iframe frameborder='0' width='500' height='1022' src='https://platform.twitter.com/embed/index.html?creatorScreenName=emmanuelJet_&amp;dnt=false&amp;embedId=twitter-widget-4&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=1231463519276630016&amp;lang=en&amp;origin=https%3A%2F%2Faekiti.com%2F&amp;siteScreenName=AeternityEkiti&amp;theme=light&amp;widgetsVersion=c4096c4b%3A1589303485003&amp;width=500px'></iframe></p><p>Jesulonimi took over to explain how æternity is making use of ReactJS to build awesome dæpp easily while connecting to a node. <a href='https://github.com/aekiti/devstudyjaem-ekiti/tree/master/week4' target='_blank'>Learn more on GitHub.</a></p><p>Learn more about node at the <a href='https://aeternity.com/documentation-hub' target='_blank'>documentation hub</a>.</p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-03-19',
      'created_at' => date('2020/03/19 00:00:00'),
      'updated_at' => date('2020/03/19 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 6,
      'title' => 'Week Five — Developer Study Jæm(Ekiti State)',
      'slug' => 'weekfive-destudyjaem-ekiti',
      'excerpt' => 'As we entered the middle of the awesome workshop series tagged "Developer Study Jæm(Ekiti)", we dived into the creation of our final project that we called AEchat',
      'article' => "<p>After making sure the jæmers understood and installed AEproject and ReactJS on their system we started our final training series centered on the creation of a decentralized web æpp on æternity blockchain with the use of the might AEproject Shape React technology.</p><p><b>Quick Info on the final project</b>:<br>AEchat is a decentralized chat æpp on æternity Blockchain that utilizes IPFS technology to store and retrieve files on the blockchain.<p>Day 1 started with laying the SmartContract foundation for the chat æpp as Jesulonimi Akingbesote started the workshop by explaining the basic functions needed for the æpp. The session involved writing the Chat æpp SmartContract using Sophia. On the other hand, he provided another fundamental and deeper understanding of the general basics of the language itself. Jesulonimi assured the Jæmers that the only prerequisite is a basic understanding of the Sophia programming language.</p><p>While explaining, we created the user record, state record, init function, register profile function, get profile function, send friend request function, accept friend request function and lots more.</p><p style='text-align:center'><iframe frameborder='0' width='500' height='1048' src='https://platform.twitter.com/embed/index.html?creatorScreenName=emmanuelJet_&amp;dnt=false&amp;embedId=twitter-widget-5&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=1233760263897329665&amp;lang=en&amp;origin=https%3A%2F%2Faekiti.com%2F&amp;siteScreenName=AeternityEkiti&amp;theme=light&amp;widgetsVersion=c4096c4b%3A1589303485003&amp;width=500px'></iframe></p><p>Day 2 started with finalizing our Chat æpp SmartContract and with the excitement of the learners to write their own smart contract, Emmanuel Joseph(JET) asked the jæmers questions on SmartContracts and then gave them some time to write different SmartContracts that will solve a problem. It was fun and learning-filled as they came up with amazing smart contracts.</p><p>Some of the smart contract solved problems in the Educational, Transportation and Housing sectors. The Jæmers then started to prepare for their submission on dacade to earn their $75 reward in æ for beautiful and amazing solutions on æternity blockchain.</p><p>The creation of React Shape æpp using aeternity AEproject technology on all the Jæmers system ended the <a href='https://github.com/aekiti/devstudyjaem-ekiti/tree/master/week5' target='_blank'>Developer Study Jæm(Ekiti State) Week 5</a> workshop series.</p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-04-01',
      'created_at' => date('2020/04/01 00:00:00'),
      'updated_at' => date('2020/04/01 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 7,
      'title' => 'Online Session(Introduction) — Developer Study Jæm(Ekiti State)',
      'slug' => 'online-intro-devstudyjaem-ekiti',
      'excerpt' => 'With the love and interest of developers outside Ekiti State for the ongoing Developer Study Jæm, we decided to bring them on board by participating in our online workshop series',
      'article' => "<p style='text-align:center'><iframe src='//www.youtube.com/embed/QuV3Q426b2Q' frameborder='0' width='640' height='360' class='note-video-clip'></iframe></p><p>As we know that Developer Study Jæm is a 10 weeks workshop series aimed at introducing æternity technologies to web developers, we then decided to extend this opportunity to interested developers outside Ekiti State.</p><p style='text-align:center'><iframe src='//docs.google.com/document/d/e/2PACX-1vQ4Auwgrj2wLrotU1skbmDmsx_g7GwSCBLyPaEkoDSQqg1Jd1fnKBMguKTSgkMwMVz6quPpogjoAehh/pub?embedded=true' frameborder='0' width='760' height='569'></iframe></p><p>We have therefore created a separate curriculum for these developers; the Curriculum includes making sure the online jæmers understand how to write SmartContract using FireEditor, integrating SmartContract on a web æpp, understanding and installing æcli and æproject and finally understanding how to use IPFS technology. We then created a registration form for the application for DevStudyJæm Online Series so we can keep in touch.</p><p style='text-align:center'><iframe frameborder='0' width='500' height='1090' src='https://platform.twitter.com/embed/index.html?creatorScreenName=emmanuelJet_&amp;dnt=false&amp;embedId=twitter-widget-6&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=1234012370902671360&amp;lang=en&amp;origin=https%3A%2F%2Faekiti.com%2F&amp;siteScreenName=AeternityEkiti&amp;theme=light&amp;widgetsVersion=c4096c4b%3A1589303485003&amp;width=500px'></iframe></p><p>The Online workshop Session will be on Zoom and YouTube where recorded sessions will be posted on a separate PlayList on our Youtube channel. We then created a directory on our GitHub repo to accommodate contents from the online workshop and also updated our GitHub Guide book.</p><p>Stay tuned for more information on the <a href='https://github.com/aekiti/devstudyjaem-ekiti/tree/master/online' target='_blank'>Online Workshop Series</a> for the ongoing Developer Study Jæm(Ekiti State).</p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-04-02',
      'created_at' => date('2020/04/02 00:00:00'),
      'updated_at' => date('2020/04/02 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 8,
      'title' => 'Week Six — Developer Study Jæm(Ekiti State)',
      'slug' => 'weeksix-destudyjaem-ekiti',
      'excerpt' => 'With the jæmers in high spirit after successfully completing AEchat SmartContract, Week 6 kicked off on a positively brighter note',
      'article' => "<p>Week 6 of the <a href='https://aekiti.github.io/devstudyjaem-ekiti/' target='_blank'>Developer Study Jæm(Ekiti)</a> started with teaching the Interplanetary File System(IPFS).</p><p><a href='https://ipfs.io/' target='_blank'>IPFS</a> is a peer - to - peer hypermedia protocol designed to make the web faster, safer and more open. With IPFS, your file and all of the blocks within it is given a unique finger point called a cryptographic hash.</p><p>Week 6 Day 1 of Developer study jæm(Ekiti) began with the jæmers learning about IPFS; how to use it to store files and retrieve files from the blockchain. The jæmers were taught on the benefits of IPFS, which includes that;</p><ol><li>IPFS lets you address large amounts of data and place the immutable, permanent links into blockchain transactions. This timestamps and secures content without having to put the data itself on the chain.</li><li>IPFS also keeps every version of your files and makes it simple to set up resilient networks for mirroring data.</li><li>IPFS aims to surpass HTTP in order to build a better web for all of us. HTTP downloads files from one computer at a time instead of getting pieces from multiple computers simultaneously; peer - to - peer IPFS saves big on bandwidth up to 60% for video, making it possible to efficiently distribute high volumes of data without duplication and so on.</li><li>IPFS removes duplications across the network.</li><li>Each network node stores only content it is interested in, plus some indexing information that helps figure out which node is storing what. When you look up a file to view or download, you're asking the network to find the nodes that are storing the content behind that file's hash.</li><li>You don't even need to remember the hash, though — every file can be found by human-readable names using a decentralized naming system called IPNS</li></ol><p>After learning about all the benefits of IPFS, the jæmers learned how to add IPFS technology to their React App using its dependency; a very stressful task, they were rewarded with æternity tokens when they successfully installed IPFS dependency on their ReactJS æpp. Day 1 ended with the jæmers integrating IPFS technology on the Developers Study Jæm final project (AEchat) to store users' profile images.</p><p style='text-align:center'><iframe frameborder='0' width='500' height='1051' src='https://platform.twitter.com/embed/index.html?creatorScreenName=emmanuelJet_&amp;dnt=false&amp;embedId=twitter-widget-7&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=1235896396722638848&amp;lang=en&amp;origin=https%3A%2F%2Faekiti.com%2F&amp;siteScreenName=AeternityEkiti&amp;theme=light&amp;widgetsVersion=c4096c4b%3A1589303485003&amp;width=500px'></iframe></p><p>Week 6 Day 2 workshop began with the jæmers learning how to deploy their ReactJS æpp on GitHub, we further looked at the problems with building a ReactJS æpp that has IPFS technology as a dependency and how to fix it.</p><p>The jæmers were told that no matter what they do with the web, IPFS has proved to be useful to achievers, service providers, researchers, developing world blockchains and even content creators. We ended week 6 by fixing IPFS dependency bug problems while the <a href='https://github.com/aekiti/devstudyjaem-ekiti/tree/master/week6' target='_blank'>Developer Study Jæm(Ekiti State) Week 6</a> code samples where pushed to GitHub.</p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-04-04',
      'created_at' => date('2020/04/04 00:00:00'),
      'updated_at' => date('2020/04/04 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 9,
      'title' => 'Introduction To Sophia(Online Session) — Developer Study Jæm(Ekiti State)',
      'slug' => 'online-sophia-devstudyjaem-ekiti',
      'excerpt' => 'As promised last week, the first online session of the Developers Study Jæm (Ekiti) online series for our developers online began with an Introduction To Sophia',
      'article' => "<p style='text-align:center'><iframe src='//www.youtube.com/embed/lrUCTD5qriQ' frameborder='0' width='640' height='360' class='note-video-clip'></iframe></p><p>During the online session, <a href='https://aeternity.com/documentation-hub/protocol/contracts/sophia/' target='_blank'>Sophia</a> was introduced by giving an overview of how to write a SmartContract using FireEditor; an example of the <em>Book library</em> was sighted to help the developers grasp a better understanding of what the series is all about.</p><p>We created a SmartContract to save and retrieve books in a library. We started by creating a contract and named it “BookLibrary”, then went on to create a record “bookInfo” to collect all the book information(title, ISBN and date of books).</p><p>We moved forward by creating our state record where we mapped each book to an address that served as the users’ address, we further created the init function which initialized the SmartContract and also gets the variables at the initialized state.</p><p style='text-align:center'><a href='https://github.com/aekiti/devstudyjaem-ekiti/tree/master/online/introduction-to-sophia' target='_blank'>Find code samples on GitHub</a></p><p>Then we created the function to get all books stored in the library added by a user and also created a function to add a book to the library.</p><p>The session was prerecorded and the video was uploaded on YouTube. Every developer willing and ready to learn is thereby encouraged to watch it anytime they are free and at their own comfort.</p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-04-05',
      'created_at' => date('2020/04/05 00:00:00'),
      'updated_at' => date('2020/04/05 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 10,
      'title' => 'Week Seven — Developer Study Jæm(Ekiti State)',
      'slug' => 'weekseven-destudyjaem-ekiti',
      'excerpt' => 'Week 7 began with heightened excitement and intense enthusiasm of the jæmers as they came with their all-out readiness to design, restructure and learn further in the workshop series',
      'article' => "<p>After successfully planning and structuring the database architecture for the AEchat æpp using Sophia, the jæmers learned how to sync real-time data from æternity blockchain record so the chat can be seen in real-time.</p><p>Day 1 of week 7 began with the jæmers planning their database architecture on the chat æpp. They also solved the problem of reading chat in real-time. That is; once a user sends a message, after accepting the friend request on the AEchat æpp, the recipient of the message would be able to get that message in real-time without having to refresh the page.</p><p>After planning and solving the problem of reading chat in real-time, the jæmers went through the <a href='https://www.youtube.com/playlist?list=PLVz98HTQCJzSF1ncVnhIRjGRBBxZDcFz7' target='_blank'>Online Session - Developer Study Jæm(Ekiti State) playlist on our YouTube channel</a> to help refresh their memories on everything they have learned so far.</p><p>They began by going through the 'Introduction to Sophia' course, then went on to the 'Integrating smart contract' course and finally went to review the 'IPFS course'. When the jæmers have successfully reviewed the videos and refreshed their memories, they started writing their smart contract better and learned new functions they could add on their smart contract; they enhanced their previously written smart contract for their decade submission and they continued working towards their decade submission.</p><p style='text-align:center'><iframe frameborder='0' width='500' height='898' src='https://platform.twitter.com/embed/index.html?creatorScreenName=emmanuelJet_&amp;dnt=false&amp;embedId=twitter-widget-8&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=1239208257476009986&amp;lang=en&amp;origin=https%3A%2F%2Faekiti.com%2F&amp;siteScreenName=AeternityEkiti&amp;theme=light&amp;widgetsVersion=c4096c4b%3A1589303485003&amp;width=500px'></iframe></p><p>After they had written their smart contract well and had tested it with FireEditor, they started writing their HTML and CSS codes for their web æpp. Then the jæmers started writing their JavaScript all in preparation of the submission on dacade so as to receive their $75 bounty for <a href='https://dacade.org/ae-dev-101/introduction/?utm_source=aembassador-emmanueljet' target='_blank'>æternity development 101 course</a>. The chat æpp development continued to progress as the UI was fixed and fully written.</p><p>The architecture for the whole chat æpp became well structured; from sending friend requests, to accepting the request, to chatting and most importantly setting profile.</p><p> The jæmers structured the æpp in such a way that the users had to first have added their profile and while adding the profile, a picture of the user which is stored on the blockchain using IPFS technology. After filing the profile, the users can then send a friend request using the 'friend's' æternity wallet address, imputing the wallet address of such individual sends a friend request. If the friend accepts the request, then the two users' profile appears on each other's friend list giving the users the ability to send messages to one another; messages that are stored on the blockchain with limited gas fees and the messages are received in real-time.</p><p>The week ended with the jæmers successfully completing their smartcontract and writing their UI all for their dacade submissions. <a href='https://github.com/aekiti/devstudyjaem-ekiti/tree/master/week7' target='_blank'>Learn more on GitHub.</a></p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-04-08',
      'created_at' => date('2020/04/08 00:00:00'),
      'updated_at' => date('2020/04/08 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 11,
      'title' => 'Integrating SmartContract(Online Session) — Developer Study Jæm(Ekiti State)',
      'slug' => 'online-smartcontract-devstudyjaem-ekiti',
      'excerpt' => 'For our second online session of the Developers Study Jæm(Ekiti State) for our developers online, we decided to look at Integrating SmartContract',
      'article' => "<p style='text-align:center'><iframe src='//www.youtube.com/embed/BZeHY_COpa8' frameborder='0' width='640' height='360' class='note-video-clip'></iframe></p><p>After writing our book library smart contract, we moved on to writing the UI and also making use of our smart contract using æternity JavaScript SDK.</p><p>Integrating SmartContract was divided into four parts in this online session in which part one was to write out HTML codes, part two was HTML and CSS code, part three was using æternity JavaScript SDK to utilize the smart contract written and part four was deploying our æpp on GitHub and running it on base æpp. <a href='https://github.com/aekiti/devstudyjaem-ekiti/tree/master/online/integrating-smartcontracts' target='_blank'>Learn more on GitHub.</a></p><p style='text-align:center'><iframe src='//www.youtube.com/embed/IUGsjfaqVEc' frameborder='0' width='640' height='360' class='note-video-clip'></iframe></p><p>For the part one and two of the session, we wrote the HTML and CSS codes of the book library that does mainly what our smart contract is doing; adding books to the library and retrieving books from the library on æternity blockchain. We wrote the HTML codes, functions, the elements which were divided into different sections and the CSS codes and JavaScript; CSS to style it and JavaScript for the behavior (making the menu icon open and close the nav item).</p><p style='text-align:center'><iframe src='//www.youtube.com/embed/DGIMu4dmy78' frameborder='0' width='640' height='360' class='note-video-clip'></iframe></p><p>Part three of the integrating smart contract session, involved us utilizing the smart contract by bringing in our smart contract into our æpp using æternity JavaScript SDK creating different functions to add books to and get books to the library. At the initial stage, we wrote our smart contract address, gotten by deploying our smart contract on FireEditor, then we added our contract source; the whole contract code. We then created our Event Listener which fetch all book data using our smart contract on the page load.</p><p style='text-align:center'><iframe src='//www.youtube.com/embed/rhNbP-FevHo' frameborder='0' width='640' height='360' class='note-video-clip'></iframe></p><p>Finally, for part four, we created a GitHub repo the deployed our project so as to get a GitHub page like to test our æpp on base æpp.</p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-04-10',
      'created_at' => date('2020/04/10 00:00:00'),
      'updated_at' => date('2020/04/10 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 12,
      'title' => 'Week Eight — Developer Study Jæm(Ekiti State)',
      'slug' => 'weekeight-destudyjaem-ekiti',
      'excerpt' => 'After successfully planning, structuring and restructuring the database architecture for the AEchat æpp and learning how to sync in real-time the past week, Week 8 began with the lead and co-leads pride for the jæmers willingness to learn, progress and their accomplishment so far',
      'article' => "<p><a href='https://github.com/aekiti/devstudyjaem-ekiti/tree/master/week8' target='_blank'>Week 8 of the Developers Study Jæm(Ekiti State)</a> started with the test run of the AEchat æpp using the AEproject test feature to write the Unit test.</p><p>After successfully test running the AEchat æpp, we kicked day 1 off with the jæmers continuing to write their dacade project, working more on the JavaScript this time since they had completed their smart contract and also the User Interface in Week 7 of the Study Jæm series. On the JavaScript, the jæmers worked on the aspect of using æternity JavaScript SDK to connect their smart contract to their sites.</p><p style='text-align:center'><iframe frameborder='0' width='500' height='989' src='https://platform.twitter.com/embed/index.html?creatorScreenName=emmanuelJet_&amp;dnt=false&amp;embedId=twitter-widget-1&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=1242395841891053568&amp;lang=en&amp;origin=https%3A%2F%2Faekiti.com%2F&amp;siteScreenName=AeternityEkiti&amp;theme=light&amp;widgetsVersion=c4096c4b%3A1589303485003&amp;width=500px'></iframe></p><p>On Day 2, some of the Jæmers completed their dacade projects, this definitely made the organizers proud and impressed with their zealousness; the other jæmers equally continued the work on their own dacade project.</p><p>The organizers decided to take a break and use that time to shout out to some of the communities that the developers registered for the Developers Study Jæm series.</p><p><b><a href='https://aechat-aekiti.web.app' target='_blank'>AEchat</a>: A decentralized chat æpp on æternity blockchain</b></p><p>We then deployed our AEchat æpp on Testnet and it was ready for beta test thereby successfully ending Week 8.</p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-04-16',
      'created_at' => date('2020/04/16 00:00:00'),
      'updated_at' => date('2020/04/16 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 13,
      'title' => 'Interplanetary File System (online session) — Developer Study Jæm(Ekiti State)',
      'slug' => 'online-ipfs-devstudyjaem-ekiti',
      'excerpt' => 'For the third online session of the Developers Study Jæm(Ekiti State) for our developers who cannot be present physically, we looked into the Interplanetary File System(IPFS)',
      'article' => "<p style='text-align:center'><iframe src='//www.youtube.com/embed/Ms48q_gVMiM' frameborder='0' width='640' height='360' class='note-video-clip'></iframe></p><p>After writing our smart contract, building our UI, and using æternity JavaScript SDK to interact with our smart contract for storing and retrieving books from the library we then included the IPFS technology to handle book images on the blockchain.</p><p>We made use of IPFS and Axois JavaScript library to handle the book image by editing our smart contract and adding the parameter image to the book record; making it a data type of string that would be responsible for collecting the IPFS hash of the image.</p><p>We then edited our JavaScript by making use of the Axios library to help handle saving books on the blockchain using IPFS and also retrieving those books using IPFS. We used the IPFS JavaScript library to maximize the use of IPFS technology to be able to handle the storing of an image on the blockchain. <a href='https://github.com/aekiti/devstudyjaem-ekiti/tree/master/online/interplantary-file-system' target='_blank'>Learn more on GitHub.</a></p><p style='text-align:center'><iframe src='//www.youtube.com/embed/QuV3Q426b2Q' frameborder='0' width='640' height='360' class='note-video-clip'></iframe></p><p>Our online developers are therefore encouraged to in their own spare time and at their leisure, check out the <a href='https://www.youtube.com/playlist?list=PLVz98HTQCJzSF1ncVnhIRjGRBBxZDcFz7' target='_blank'>videos on our YouTube channel</a>.</p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-04-17',
      'created_at' => date('2020/04/17 00:00:00'),
      'updated_at' => date('2020/04/17 00:00:00')
    ]);

    DB::table('stories')->insert([
      'id' => 14,
      'title' => 'æpps — Developer Study Jæm(Ekiti State)',
      'slug' => 'aepps-devstudyjaem-ekiti',
      'excerpt' => 'After successfully bringing the Developer Study Jæm(Ekiti State) workshop to a wrap, the jæmers developed æpps on æternity blockchain by putting all they had been taught during the 10 weeks workshop series to good use and in turn, they created some outstanding and groundbreaking æpps',
      'article' => "<p>In creating these æpps, ækiti team created a guide where the jæmers decentralized æpps built on aeternity blockchain can be found. The guide is a combination of 10 (ten) different æpps, an extension of the jæmers themselves who put their hearts and souls into creating these æpps including;</p><h2><b><a href='https://aekiti.github.io/aepps/aetwaet/' target='_blank'>AeTwaet</a></b></h2><p style='text-align: center'><iframe frameborder='0' src='//www.youtube.com/embed/3Jf6UiTEF5Y' width='640' height='360' class='note-video-clip'></iframe></p><p>AeTwaet is a decentralized æpp built using æternity technologies and JavaScript by <a href='https://twitter.com/YinkaEnoch' target='_blank'>Yinka Enoch Adedokun</a>. The æpp mainly runs on æternity blockchain through the Sophia smart contract written and interacts with the UI using æternity JavaScript SDK. It is a streamlined version of Twitter where users can twæt and receive tips as even the User Interface was built to make the user feel they are on a decentralized Twitter. One of the cool features of AeTwaet is the ability to receive tips from anyone on the platform which makes a user more popular or highly rated with the amount of crypto value obtained from a Twæt. A major push that inspired the thought and creation of this æpp is the Medium clap feature.</p><h2><a href='https://aekiti.github.io/aepps/rideart' target='_blank'>RideArt</a></h2><p style='text-align: center'><iframe frameborder='0' src='//www.youtube.com/embed/2D-UHp2v58I' width='640' height='360' class='note-video-clip'></iframe></p><p>RideArt is a transportation web æpp on æternity blockchain developed by <a href='https://twitter.com/AmakaRivas' target='_blank'>Amaka Ubaka</a>. It also makes use of æternity JavaScript SDK for the Sophia smart contract integration. RideArt is an aepp that helps users get to their destination with absolute ease by booking a ride at their convenience thereby saving them from the stress of public transportation. It has a record-keeping feature that shows its users their previous rides while the admin has access to all users alongside their rides.</p><h2><a href='https://aekiti.github.io/aepps/stherfix' target='_blank'>Stherfix</a></h2><p style='text-align:center'><iframe frameborder='0' src='//www.youtube.com/embed/STkpfk1qmxQ' width='640' height='360' class='note-video-clip'></iframe></p><p>Stherfix is an æpp developed using æternity technologies(Sophia SmartContract and æternity JS SDK) by <a href='https://twitter.com/tosin_esther_' target='_blank'>Oluwatosin Ayeni</a>. This aepp helps to create personalized booking experiences for dental check-ups by making reservations from any device. Stherfix has a profile feature that makes a user register on the æpp using his/her æternity wallet address. With this profile feature, a user can see his appointments(previous and recent) while the admin manages the whole system.</p><h2><a href='https://aekiti.github.io/aepps/geohostel' target='_blank'>GeoHostel</a></h2><p style='text-align:center'><iframe frameborder='0' src='//www.youtube.com/embed/Ycy3Lsi78Ro' width='640' height='360' class='note-video-clip'></iframe></p><p>GeoHostel is an æpp developed by <a href='https://twitter.com/ejilolahmed' target='_blank'>Hammed Ejilola</a> that makes use of æternity and IPFS technology. It makes use of the 6.1.2 æternity JS SDK version alongside it’s Sophia smart contract while IPFS handles the image storing on the internet by saving the image hash on the smart contract. GeoHostel solves the problem or difficulty of getting hostels on campus with its role enabled feature. A caretaker or landlord adds a hostel including the image, facilities, and amount(in AE value) of the hostel and a user can reserve the hostel by paying the stipulated value added by the hostel manager. The manager can then see all the hostels he/she has added to the system while the users can see the list of the hostel he/she has reserved while the admin has overall access.</p><h2><a href='https://aekiti.github.io/aepps/AePhotos' target='_blank'>AePhotos</a></h2><p style='text-align:center'><iframe frameborder='0' src='//www.youtube.com/embed/yR7ugovNE-w' width='640' height='360' class='note-video-clip'></iframe></p><p>AEPhotos is also an æpp on æternity blockchain that was built by <a href='https://twitter.com/EmmanuelPcharl1' target='_blank'>Pelumi Emmanuel</a>. It makes use of the version 6.1.2 æternity JavaScript SDK to communicate with its smart contract. AEphotos is a streamlined version of Google Photos that helps users to store images including the image name on the blockchain. AEphotos utilities IPFS technology to save these images on the blockchain and finally saves the IPFS hash in the smart contract including the image name. Unlike Google Photos, AEPhotos helps stop the duplicating of the same image across the internet with the included IPFS technology.</p><h2><a href='https://aekiti.github.io/aepps/hms' target='_blank'>Hospital Management System</a></h2><p style='text-align:center'><iframe frameborder='0' src='//www.youtube.com/embed/cPi5g9CEUFM' width='640' height='360' class='note-video-clip'></iframe></p><p>Hospital Management System or HMS for short is also an æpp built on æternity blockchain. HMS was developed by <a href='https://twitter.com/favour_adeshina' target='_blank'>Favour Adeshina</a> and also runs using Sophia smart contract and æternity JavaScript SDK for contract calls. HMS, as the name implies, is an æpp built for not just hospitals but all healthcare services. HMS helps to keep patient records including all medical treatment(s) given to a patient by a particular doctor. One of the amazing features of HMS is the restriction functionality in the smart contract where there is patient, doctor, and admin role. A patient can register for free while there is a payment of 2æ for doctor registration and the admin has the right to all data. HMS also utilizes the use of IPFS technology to handle patients and doctors display pictures respectively.</p><h2><a href='https://aekiti.github.io/aepps/jaenet' target='_blank'>Jænet</a></h2><p style='text-align:center'><iframe frameborder='0' src='//www.youtube.com/embed/ivpbnsVtmIc' width='640' height='360' class='note-video-clip'></iframe></p><p>Jænet is an app that fully runs using æternity Sophia smart contract developed by <a href='https://twitter.com/janetomotay0' target='_blank'>Janet Babajide</a>. It makes use of æternity JavaScript SDK for its smart contract integration. As the æpp name implies, Jænet is a portfolio site that showcases paperwork designs up for sale. It’s is strictly role-based æpp where only the admin has access to add a design, update the ‘about me' content and also see the list of all transactions made on the system. The users can purchase a design using AE tokens and also see the list of their transactions including the quantity and price at the My Designs section of æpp. Jænet also utilizes the use of IPFS technology to handle the design image by saving the image hash in its smart contract record.</p><h2><a href='https://aekiti.github.io/aepps/CrimRec' target='_blank'>CrimRec</a></h2><p style='text-align:center'><iframe frameborder='0' src='//www.youtube.com/embed/99DlMKG2zV8' width='640' height='360' class='note-video-clip'></iframe></p><p>CrimRec is also an æpp on æternity blockchain that makes use of æternity JavaScript SDK to communicate with its Sophia smart contract. CrimRec as developed by <a href='https://twitter.com/NwankwoStephe15' target='_blank'>Stephen Nwankwo</a> and its main purpose is to register and store information about criminals. This æpp helps both Police and prison service ineffective record keeping. Its mode of operation is pretty easy as it’s users need to register a criminal first then add as much as a possible crime/offense paramount to the criminal at any appointed time thereby saving the date of crime as well as the date the criminal was created.</p><h2><a href='https://aekiti.github.io/aepps/srr' target='_blank'>Student Results Recorder</a></h2><p style='text-align:center'><iframe frameborder='0' src='//www.youtube.com/embed/ywqWNaoTzPo' width='640' height='360' class='note-video-clip'></iframe></p><p>Student Results Recorder(SRR) is an æpp fully on æternity blockchain built by <a href='https://twitter.com/saintmalik_' target='_blank'>Salawu Abdulmalik</a>. This æpp also makes use of the version 6.1.2 æterniy JavaScript SDK for the smart contract integration. The push that inspired the creation of SRR is institutions in Nigeria to solve a particular problem of student result keeping. SRR can restrict users of some privileges depending on the role the user has. It has 3 roles which include student, coordinator, and chancellor which has their state records respectively in the smart contract. SRR’s main purpose is to keep student results on the blockchain to avoid changing or loss of the student’s record. A student after registration can see his/her results, a coordinator has access to add student’s results while the chancellor can monitor the whole system.</p><h2><a href='https://aekiti.github.io/aepps/aequiz' target='_blank'>AEQuiz</a></h2><p style='text-align:center'><iframe frameborder='0' src='//www.youtube.com/embed/pfp6MaWdN9E' width='640' height='360' class='note-video-clip'></iframe></p><p>AEQuiz is an æpp developed by <a href='https://twitter.com/moyinfesobi' target='_blank'>Moyinoluwa Fesobi</a>. It is an app that makes use of æternity JavaScript SDK to interact with it’s Sophia Smart Contract. AEQuiz, as the name implies, was created to ask it’s users questions in the form of a quiz which engages the audience in a unique and fun way by giving points on correctly answered questions. It has a question page where the admin can add or delete questions from the smart contract questions record. The exciting feature AEQuiz has is the ability to engage the users in a competitive way using the Scoreboard feature. The Scoreboard feature allows users to add their obtained points from the quiz as a high score. This high score can be updated as long as the user wishes to update it.</p><p style='text-align:center'><iframe frameborder='0' src='//www.youtube.com/embed/Q-jiLsimTz0' width='640' height='360' class='note-video-clip'></iframe></p><p>As we all know that we were developing a chat æpp use case during the workshop series. Paramount to Week 8 Write Up, AEchat is live for beta testing at <a href='https://aechat-aekiti.web.app'>https://aechat-aekiti.web.app</a>.</p><h1>What is AEchat?</h1>AEchat is a decentralized chat æpp on æternity blockchain that utilizes ReactJS, IPFS, Google, and of course æternity technology. AEchat is an open-source project where contributions are highly welcome on GitHub.<h2>FAQ</h2><ol><li>Are the messages stored in plain text in the contract? For now, all messages are stored as plain text.</li><li>Is there any security measure that protects our privacy? Presently, we only make use of the contract where all messages, friends are mapped to an address(Where the address is the function caller). Although we are working more on encrypting messages sent.</li><li>How do I edit my profile? With a simple click of the profile picture, you can always edit your profile.</li><li>Can I send tokens to a friend? As of now, no but this alongside sending images and other files will be rolling out soon.</li><li>Why should I use AEchat? With AEchat all you need is an address to send messages, files, and token(rolling out soon).</li><li>Can I use AEchat outside base æpp? This feature is in progress as AEchat is presently a PWA site that will remotely connect to base æpp soon.</li><li>Where can I get support if I’m having problems with the AEchat website? Please leave your comments, suggestions, as well as reports on any issues as a comment below or send a mail to <a href='mailto:info@aekiti.com' style='font-size: 1rem; background-color: rgb(255, 255, 255);'>info@aekiti.com</a>.</li></ol><p style='text-align:center'><iframe frameborder='0' width='500' height='1373' src='https://platform.twitter.com/embed/index.html?creatorScreenName=emmanuelJet_&amp;dnt=false&amp;embedId=twitter-widget-2&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=1248641798202896385&amp;lang=en&amp;origin=https%3A%2F%2Faekiti.com%2F&amp;siteScreenName=AeternityEkiti&amp;theme=light&amp;widgetsVersion=c4096c4b%3A1589303485003&amp;width=500px'></iframe></p>",
      'category_id' => 2,
      'status' => 'publish',
      'published_date' => '2020-05-07',
      'created_at' => date('2020/05/07 00:00:00'),
      'updated_at' => date('2020/05/07 00:00:00')
    ]);

    for ($i=1; $i<=14; $i++) {
      DB::table('story_tag')->insert(
        [
          'story_id' => $i,
          'tag_id' => 2,
        ]
      );
    }
  }
}
